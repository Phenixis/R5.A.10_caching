<?php
session_start();
require_once __DIR__ . '/db.php';
require_once __DIR__ . '/redis.php';

$feedback = null;

$query = 'SELECT id, label, created_at FROM items ORDER BY id DESC LIMIT 50';
$cacheKey = sqlToSnakeCase($query);

// Generated by AI
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['action']) && $_POST['action'] === 'insert') {
        $stmt = $pdo->prepare('INSERT INTO items (label) VALUES (?), (?), (?)');
        $labels = [
            'Valeur ' . date('H:i:s'),
            'Exemple ' . rand(100, 999),
            'Test ' . substr(sha1(uniqid('', true)), 0, 6)
        ];
        try {
            $stmt->execute($labels);
            $redis->del($cacheKey);
            $_SESSION['flash_feedback'] = 'Insertion de 3 lignes réussie. Réinitialisation du cache REDIS.';
        } catch (PDOException $e) {
            $_SESSION['flash_feedback'] = 'Erreur insertion: ' . htmlspecialchars($e->getMessage());
        }
    } elseif (isset($_POST['action']) && $_POST['action'] === 'truncate') {
        try {
            // TRUNCATE with identity restart for a clean demo state
            $pdo->exec('TRUNCATE TABLE items RESTART IDENTITY');
            $redis->del($cacheKey);
            $_SESSION['flash_feedback'] = 'Table vidée et identifiants réinitialisés. Cache invalidé.';
        } catch (PDOException $e) {
            $_SESSION['flash_feedback'] = 'Erreur TRUNCATE: ' . htmlspecialchars($e->getMessage());
        }
    }
    header('Location: ' . strtok($_SERVER['REQUEST_URI'], '?'), true, 303);
    exit;
}

// Retrieve flash feedback if present
if (isset($_SESSION['flash_feedback'])) {
    $feedback = $_SESSION['flash_feedback'];
    unset($_SESSION['flash_feedback']);
}

// Generated by AI END

// Data fetch when requested
$items = [];
if (isset($_GET['fetch']) && $_GET['fetch'] === '1') {
    try {
        $items = json_decode($redis->get($cacheKey), true) ?: [];
        if (!empty($items)) {
            $feedback = $feedback ?: 'Données chargées depuis le cache Redis. Cache validé à nouveau pour 15 secondes.';
            $redis->set($cacheKey, json_encode($items), 15);
        }
    } catch (Exception $e) {
        $feedback = 'Erreur Redis: ' . htmlspecialchars($e->getMessage());
    }
    if (empty($items)) {
        try {
            sleep(2);
            $items = $pdo->query($query)->fetchAll();
            $redis->set($cacheKey, json_encode($items), 15);
            $feedback = $feedback ?: 'Données chargées depuis la base de données, valeurs mises en cache pour 15 secondes.';
        } catch (PDOException $e) {
            $feedback = 'Erreur requête: ' . htmlspecialchars($e->getMessage());
        }
    }
}
?>
<!-- Generated by AI -->
<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="UTF-8" />
    <title>Site PHP + PostgreSQL</title>
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 2rem;
            background: #f5f7fa;
        }

        h1 {
            font-size: 1.6rem;
        }

        form,
        .actions {
            margin-bottom: 1rem;
        }

        button {
            padding: .6rem 1rem;
            margin-right: .5rem;
            cursor: pointer;
            background: #2563eb;
            color: #fff;
            border: none;
            border-radius: 4px;
        }

        button.secondary {
            background: #475569;
        }

        button.danger {
            background: #dc2626;
        }
        button.danger:hover { background:#b91c1c; }
        button.danger:focus { outline:2px solid #fca5a5; outline-offset:2px; }

        table {
            border-collapse: collapse;
            width: 100%;
            background: #fff;
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: .5rem;
            text-align: left;
        }

        th {
            background: #e2e8f0;
        }

        .feedback {
            margin: 1rem 0;
            padding: .75rem 1rem;
            background: #eef6ff;
            border-left: 4px solid #3b82f6;
        }

        .empty {
            font-style: italic;
            color: #555;
        }

        .container {
            max-width: 860px;
            margin: auto;
        }

        .flex {
            display: flex;
            gap: .5rem;
        }

        a.fetch-link {
            text-decoration: none;
        }

        /* Loader Overlay & Spinner */
        .loader-overlay {
            position: relative;
            margin: 1rem 0;
            min-height: 120px;
            /* space for skeleton */
        }

        .loader-overlay.active::before {
            content: "";
            position: absolute;
            inset: 0;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(245, 247, 250, 0.95));
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, .06);
        }

        .spinner-container {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: .75rem;
            pointer-events: none;
        }

        .spinner {
            width: 42px;
            height: 42px;
            border: 4px solid #bfdbfe;
            border-top-color: #2563eb;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Skeleton table */
        .skeleton-table {
            border-collapse: collapse;
            width: 100%;
            animation: fadeIn .25s ease;
        }

        .skeleton-table td,
        .skeleton-table th {
            border: 1px solid #e5e7eb;
            padding: .55rem .5rem;
            background: #fff;
        }

        .skeleton-bar {
            display: block;
            height: .8rem;
            width: 100%;
            border-radius: 4px;
            background: linear-gradient(90deg, #f1f5f9 0%, #e2e8f0 40%, #f1f5f9 80%);
            background-size: 200% 100%;
            animation: shimmer 1.2s ease-in-out infinite;
        }

        .skeleton-bar.short {
            width: 60%;
        }

        .skeleton-bar.tiny {
            width: 30%;
        }

        @keyframes shimmer {
            0% {
                background-position: 200% 0;
            }

            100% {
                background-position: -200% 0;
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        /* Reduced motion */
        @media (prefers-reduced-motion: reduce) {
            .spinner {
                animation: none;
            }

            .skeleton-bar {
                animation: none;
            }
        }

        .fade-in {
            animation: fadeIn .3s ease;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>Mini Site: PostgreSQL (PHP)</h1>
        <p>Cet exemple insère 3 lignes de test puis permet d'afficher les dernières valeurs.</p>

        <div id="feedbackHost" aria-live="polite">
            <?php if ($feedback): ?>
                <div class="feedback"><?= $feedback ?></div>
            <?php endif; ?>
        </div>

        <form method="post" action="<?= strtok($_SERVER['REQUEST_URI'], '?') ?>" style="margin-bottom:.5rem;">
            <input type="hidden" name="action" value="insert" />
            <button type="submit">Insérer 3 valeurs</button>
            <button class="secondary" type="button" id="fetchBtn">Afficher les valeurs</button>
        </form>
        <form method="post" action="<?= strtok($_SERVER['REQUEST_URI'], '?') ?>" onsubmit="return confirm('Confirmer la suppression de toutes les lignes ?');" style="margin-bottom:1rem;">
            <input type="hidden" name="action" value="truncate" />
            <button type="submit" class="danger">Vider la table</button>
        </form>
        <div id="itemsWrapper" class="loader-overlay" aria-live="polite">
            <div id="loadingLayer" class="spinner-container" style="display:none;" role="status" aria-label="Chargement"
                aria-live="assertive">
                <div class="spinner" aria-hidden="true"></div>
                <div style="font-size:.9rem;color:#475569;" id="loadingText">Chargement des données…</div>
            </div>
            <div id="itemsContainer"></div>
        </div>
        <template id="skeletonTemplate">
            <table class="skeleton-table" aria-hidden="true">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Label</th>
                        <th>Créé le</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- 5 skeleton rows -->
                    <tr>
                        <td><span class="skeleton-bar tiny"></span></td>
                        <td><span class="skeleton-bar"></span></td>
                        <td><span class="skeleton-bar short"></span></td>
                    </tr>
                    <tr>
                        <td><span class="skeleton-bar tiny"></span></td>
                        <td><span class="skeleton-bar"></span></td>
                        <td><span class="skeleton-bar short"></span></td>
                    </tr>
                    <tr>
                        <td><span class="skeleton-bar tiny"></span></td>
                        <td><span class="skeleton-bar"></span></td>
                        <td><span class="skeleton-bar short"></span></td>
                    </tr>
                    <tr>
                        <td><span class="skeleton-bar tiny"></span></td>
                        <td><span class="skeleton-bar"></span></td>
                        <td><span class="skeleton-bar short"></span></td>
                    </tr>
                    <tr>
                        <td><span class="skeleton-bar tiny"></span></td>
                        <td><span class="skeleton-bar"></span></td>
                        <td><span class="skeleton-bar short"></span></td>
                    </tr>
                </tbody>
            </table>
        </template>

        <script>
            (function () {
                const fetchBtn = document.getElementById('fetchBtn');
                const itemsWrapper = document.getElementById('itemsWrapper');
                const loadingLayer = document.getElementById('loadingLayer');
                const itemsContainer = document.getElementById('itemsContainer');
                const skeletonTemplate = document.getElementById('skeletonTemplate');
                const loadingText = document.getElementById('loadingText');

                let currentFetch = null;
                let longTimer = null;

                function showLoading() {
                    // Keep existing content until replaced to avoid layout shift
                    if (!itemsWrapper.classList.contains('active')) {
                        itemsWrapper.classList.add('active');
                    }
                    loadingLayer.style.display = 'flex';
                    loadingText.textContent = 'Chargement des données…';
                    // Insert skeleton only if no table currently displayed
                    if (!itemsContainer.querySelector('table')) {
                        itemsContainer.innerHTML = '';
                        const clone = skeletonTemplate.content.cloneNode(true);
                        itemsContainer.appendChild(clone);
                    }
                    fetchBtn.disabled = true;
                    fetchBtn.setAttribute('aria-disabled', 'true');
                    itemsWrapper.setAttribute('aria-busy', 'true');
                    // After 1200ms, if still loading, update message
                    longTimer = setTimeout(() => {
                        if (currentFetch) {
                            loadingText.textContent = 'Un instant… (optimisez avec le cache)';
                        }
                    }, 1200);
                }

                function hideLoading() {
                    loadingLayer.style.display = 'none';
                    itemsWrapper.classList.remove('active');
                    fetchBtn.disabled = false;
                    fetchBtn.removeAttribute('aria-disabled');
                    itemsWrapper.removeAttribute('aria-busy');
                    clearTimeout(longTimer);
                    currentFetch = null;
                }

                function fetchData() {
                    if (currentFetch) return; // prevent parallel fetches
                    showLoading();
                    const controller = new AbortController();
                    currentFetch = controller;
                    fetch('?fetch=1', { signal: controller.signal })
                        .then(r => r.text())
                        .then(html => {
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(html, 'text/html');
                            const table = doc.querySelector('table');
                            const feedback = doc.querySelector('.feedback');
                            const empty = doc.querySelector('.empty');
                            // Smooth replace
                            const frag = document.createDocumentFragment();
                            // Move feedback into unified host (replace any existing)
                            const host = document.getElementById('feedbackHost');
                            if (feedback && host) {
                                host.innerHTML = '';
                                host.appendChild(feedback);
                            }
                            if (table) frag.appendChild(table);
                            if (empty) frag.appendChild(empty);
                            itemsContainer.innerHTML = '';
                            itemsContainer.appendChild(frag);
                            if (table) table.classList.add('fade-in');
                        })
                        .catch(err => {
                            if (err.name === 'AbortError') return;
                            const host = document.getElementById('feedbackHost');
                            if (host) {
                                host.innerHTML = '<div class="feedback" style="background:#fee2e2;border-left-color:#dc2626;">Erreur lors du chargement.</div>';
                            }
                        })
                        .finally(hideLoading);
                }

                fetchBtn.addEventListener('click', fetchData);
            })();
        </script>

        <?php if (isset($_GET['fetch']) && $_GET['fetch'] === '1'): ?>
            <h2>Dernières valeurs</h2>
            <?php if (empty($items)): ?>
                <div class="empty">Aucune donnée trouvée.</div>
            <?php else: ?>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Label</th>
                            <th>Créé le</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($items as $row): ?>
                            <tr>
                                <td><?= htmlspecialchars($row['id']) ?></td>
                                <td><?= htmlspecialchars($row['label']) ?></td>
                                <td><?= htmlspecialchars($row['created_at']) ?></td>
                            </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            <?php endif; ?>
        <?php endif; ?>
    </div>
</body>

</html>
<!-- Generated by AI END -->